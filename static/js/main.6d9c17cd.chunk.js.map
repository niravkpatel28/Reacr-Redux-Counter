{"version":3,"sources":["redux/types.js","redux/reducers.js","redux/store.js","redux/actions.js","components/Counter.js","components/Results.js","App.js","index.js"],"names":["INCREMENT","DECREMENT","initialState","count","results","redo","reducer","state","action","console","log","type","concat","operation","value","key","uniqid","logo","raw","filter","result","lastAction","splice","length","i","store","createStore","applyMiddleware","next","company","actionObjectGenerator","payload","connect","countValue","dispatch","incrementCount","getState","decrementCount","storeResults","callingAction","props","onClick","deleteResult","event","target","id","resultHistory","map","onDoubleClick","renderResults","App","className","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6d9c17cd.chunk.js","sourcesContent":["//define different types of actions \n\nexport const INCREMENT ='INCREMENT';\nexport const DECREMENT = 'DECREMENT';\nexport const STORE_RESULTS= 'STORE_RESULTS';\nexport const DELETE_RESULT = 'DELETE_RESULT';\nexport const UNDO = 'UNDO'\nexport const REDO ='REDO'\n","import { INCREMENT, DECREMENT,STORE_RESULTS, DELETE_RESULT, UNDO, REDO} from './types';\nimport uniqid from 'uniqid';\n//pure function \nconst initialState ={\n    count:0,\n    results: [],\n    redo:'' // to store all results popped out of stack\n}\nconst reducer = (state=initialState,action)=>{\n    //prints action received from middleware \n\n    console.log(action);\n    //returns modified state \n    switch(action.type){\n        case INCREMENT:\n            return {\n                ...state,\n                count:state.count+1\n            }\n        case DECREMENT:\n            return{\n                ...state,\n                count:state.count-1\n            }\n        case STORE_RESULTS:\n            return{\n                ...state,\n                results:state.results.concat({\n                    type:action.operation,\n                    value: state.count,\n                    key: uniqid(),\n                    logo: action.raw\n                })\n            }\n        case DELETE_RESULT:\n            return{\n                ...state,\n                results: state.results.filter((result)=>{\n                    return result.key!==action.key\n                    // return true\n                })\n            }\n\n        case UNDO: \n        \n            let lastAction= [...state.results].splice([...state.results].length-1,1);\n            console.log('last action', lastAction)\n            return {\n                ...state,\n                results: [...state.results].filter((result,i)=>{\n                    return [...state.results].length-1!==i;\n                }),\n                redo:lastAction\n            }\n        case REDO: \n            return {\n                ...state,\n                results: [...state.results].concat(...state.redo),\n                redo:[]\n            }\n\n        default:\n            return state;\n    }\n}\n\nexport default reducer;","import { createStore } from 'redux';\nimport { applyMiddleware } from 'redux';\nimport reducer from './reducers';\n\n// without middleware\n// const store = createStore(reducer);\n\n//using middleware\nconst middleware = (store)=>{\n    return (next)=>{\n        return (action)=>{\n            console.log('Middleware ', action.type);\n            action.company=\"Raw Engineering\"\n            // action.raw = `<span aria-label=\"a rocket blasting off\" role=\"img\">ðŸš€</span>`\n            // action.raw = 'ðŸš€'\n            \n            next(action);\n        }\n    }\n    \n}\n\nconst store = createStore(reducer,applyMiddleware(middleware));\n\n\nexport default store;","// create action objects corresponding to different actions \nimport { INCREMENT, DECREMENT, STORE_RESULTS,DELETE_RESULT, UNDO,REDO} from './types';\n\n\nexport const actionObjectGenerator =(type, payload={})=>{\n    //return a javascript object with action types \n    switch(type){\n        case INCREMENT:\n            return{\n                type: INCREMENT\n            }\n        case DECREMENT:\n            return{\n                type:DECREMENT\n            }\n        case STORE_RESULTS:\n            return{\n                type:STORE_RESULTS,\n                operation: payload.operation\n            }\n        case DELETE_RESULT: \n            console.log('payload in delete', payload)\n            return{\n                type:DELETE_RESULT,\n                key:payload.key\n            }\n\n        case UNDO: \n            return{\n                type: UNDO\n            }\n        case REDO: \n            return{\n               type:REDO\n            }\n        default:\n            return{\n                type:'invalid action'\n            }\n    }\n}\n\n","//Defines Counter Component \n\nimport React from 'react';\nimport store from '../redux/store'\nimport { actionObjectGenerator } from '../redux/actions';\nimport { INCREMENT, DECREMENT,STORE_RESULTS } from '../redux/types';\nimport { connect } from 'react-redux';\n\nfunction Counter(props){\n\n    const incrementCount= ()=>{\n        //dispatch action for incrementing count\n        // store.dispatch(action,state)\n        // store.dispatch( actionObjectGenerator(INCREMENT), store.getState());\n        props.incrementCount();\n        console.log(store.getState());\n        props.storeResults(INCREMENT);\n    }\n \n    const decrementCount =()=>{\n        // store.dispatch(actionObjectGenerator(DECREMENT), store.getState());\n        props.decrementCount();\n        console.log(store.getState());\n        props.storeResults(DECREMENT);\n        \n    }\n    return(\n        <>\n            <h2> Counter Value </h2>\n            {/* <p> {JSON.stringify(store.getState())} </p> */}\n            <p> {props.countValue}</p>\n            <button onClick={ incrementCount }>{' '} + {'  '}</button>\n            <br/>\n            <button onClick={ decrementCount }>{' '} - {'  '}</button>\n        </>\n    )\n}\n\n\nconst mapStateToProps = (state)=>{\n    return{\n        countValue:state.count\n    }\n}\n\nconst mapDispatchToProps = (dispatch)=>{\n    return{\n        incrementCount: ()=>{\n            dispatch(actionObjectGenerator(INCREMENT),store.getState());\n        },\n        decrementCount:()=>{\n            dispatch(actionObjectGenerator(DECREMENT),store.getState());\n        },\n        storeResults: (callingAction)=>{\n            dispatch(actionObjectGenerator(STORE_RESULTS,{operation:callingAction}),store.getState());\n        }\n    }\n}\nexport default connect(mapStateToProps,mapDispatchToProps)(Counter);","import React from 'react' \nimport { connect } from 'react-redux'\nimport { DELETE_RESULT } from '../redux/types'\nimport { actionObjectGenerator } from '../redux/actions'\nimport store from '../redux/store'\nfunction Results(props){\n\n\n    const renderResults = ()=>{\n        let resultHistory = props.results.map((result,i)=>{\n            return (\n                <p key={result.key} id={result.key}\n                 onDoubleClick={(event)=>{\n                     props.deleteResult(event);\n\n                }}> Action: {result.type} ------  Value: {result.value}  </p>\n                \n                //  }}> {JSON.stringify(result)} </p>\n            )\n        })\n        return (\n            <>\n                {resultHistory}\n            </>\n        )\n    }\n    return(\n        <>\n            {renderResults()}\n        </>\n\n    )\n}\n\n\n\n// export default Results;\nconst mapStateToProps = (state)=>{\n    return{\n        results:state.results\n    }\n}\n\nconst mapDispatchToProps = (dispatch)=>{\n    return{\n        deleteResult: (event)=>{\n            console.log(event.target.id)\n            console.log('delete this result')\n            dispatch(actionObjectGenerator(DELETE_RESULT,{key:event.target.id}),store.getState());\n        }\n    }\n}\nexport default connect(mapStateToProps,mapDispatchToProps)(Results)","import React from 'react';\nimport './App.css';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport Counter from './components/Counter'\nimport Results from './components/Results';\n// import UndoRedo from './components/UndoRedo';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Provider store={store}>\n        <Counter/>\n        <Results/>\n        {/* <UndoRedo/> */}\n        </Provider>\n  \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}